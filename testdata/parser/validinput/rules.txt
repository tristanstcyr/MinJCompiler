< prg > −− > class i {{< decl >} < main f > {< f unct def >}}
 < decl > −−> < type > <decl'>
  <type> --> char
  <decl’> --> i;
 <main_f> −−> void main(){{< decl >} < st list > }
  < decl > −−> < type > <decl'>
   <type> --> char
   <decl’> --> i;
  <set> −−> <st> { <st> }
   <st> −−> i <st'>
    <st'> −−> <asg_st>
     <set> −−> <st> { <st> }
      <var> −−> i <index>
       <index> --> e
      <asg_st'> --> <exp>
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> i <prim'>
          <prim'> --> (<v_list>)
           <v_list> --> <elem><v_list'>
            <elem> --> n
          <v_list'> --> e
        <term'> --> e
       <exp'> --> e
  <st> −−> System.out. (<v_list>);
   <v_list> --> <elem><v_list'>
    <elem> --> i <index>
     <index> --> e
   <v_list'> --> ,<v_list'>
    <v_list> --> <elem><v_list'>
     <elem> --> 'c'
    <v_list'> --> ,<v_list'>
     <v_list> --> <elem><v_list'>
      <elem> --> 'c'
     <v_list'> --> ,<v_list'>
      <v_list> --> <elem><v_list'>
       <elem> --> i <index>
        <index> --> e
      <v_list'> --> e
Symbol table after parsing "main"
{Definition = i;
 Type = Primitive CharType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = x;
 Type = Primitive CharType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}

< funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
 <type> --> char
 <par_list> −−> < p type > i{, < p type > i}
  <p_type> --> <type> <p_type’>
   <type> --> int
   <p_type’> --> e
  <set> −−> <st> { <st> }
   <st> −−> i <st'>
    <st'> −−> <asg_st>
     <set> −−> <st> { <st> }
      <var> −−> i <index>
       <index> --> e
      <asg_st'> --> <exp>
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> 'c'
         <term'> --> e
        <exp'> --> e
   <st> −−> return <exp>;
    <exp> --> <term><exp'>
     <term> --> <prim><term'>
      <prim> --> 'c'
      <term'> --> e
     <exp'> --> e
Symbol table after parsing foo
{Definition = f;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = x;
 Type = Primitive CharType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}

