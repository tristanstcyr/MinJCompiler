< prg > −− > class i {{< decl >} < main f > {< funct_def >}}
 <main_f> −−> void main(){{< decl >} < st list > }
  <set> −−> <st> { <st> }
   <st> −−> return <exp>;
    <exp> --> <term><exp'>
     <term> --> <prim><term'>
      <prim> --> n
      <term'> --> e
     <exp'> --> e
Symbol table after parsing "main"

 <funct_def> −−> <type> i ( <par_list> ){{< decl >} <st_list> }
  <type> --> int
  < par_list > --> e
  < decl > −−> < type > <decl'>
   <type> --> int
   <decl’> --> i;
  <set> −−> <st> { <st> }
   <st> −−> i <st'>
    <st'> −−> <asg_st>
     <set> −−> <st> { <st> }
      <var> −−> i <index>
       <index> --> e
      <asg_st'> --> <exp>
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> n
         <term'> --> e
        <exp'> --> e
   <st> −−> return <exp>;
    <exp> --> <term><exp'>
     <term> --> <prim><term'>
      <prim> --> n
      <term'> --> e
     <exp'> --> e
   <st> −−> i <st'>
    <st'> −−> <asg_st>
     <set> −−> <st> { <st> }
      <var> −−> i <index>
       <index> --> e
      <asg_st'> --> <exp>
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> n
         <term'> --> e
        <exp'> --> e
   <st> −−> return <exp>;
    <exp> --> <term><exp'>
     <term> --> <prim><term'>
      <prim> --> i <prim'>
       <prim'> --> <index>
        <index> --> e
      <term'> --> e
     <exp'> --> e
Symbol table after parsing hasDeadCode
{Definition = i;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

 <funct_def> −−> <type> i ( <par_list> ){{< decl >} <st_list> }
  <type> --> int
  < par_list > --> e
  < decl > −−> < type > <decl'>
   <type> --> int
   <decl’> --> i;
  <set> −−> <st> { <st> }
   <st> −−> i <st'>
    <st'> −−> <asg_st>
     <set> −−> <st> { <st> }
      <var> −−> i <index>
       <index> --> e
      <asg_st'> --> <exp>
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> n
         <term'> --> e
        <exp'> --> e
Symbol table after parsing doesNotReturn
{Definition = i;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

 <funct_def> −−> <type> i ( <par_list> ){{< decl >} <st_list> }
  <type> --> int
  < par_list > --> e
  < decl > −−> < type > <decl'>
   <type> --> int
   <decl’> --> i;
  <set> −−> <st> { <st> }
   <st> −−> i <st'>
    <st'> −−> <asg_st>
     <set> −−> <st> { <st> }
      <var> −−> i <index>
       <index> --> e
      <asg_st'> --> <exp>
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> n
         <term'> --> e
        <exp'> --> e
   <st> −−> if <lexp> <stmt> else <stmt>
    <l_exp> --> <l_exp'> { || <l_exp> }
     <l_exp’> --> <exp> { && <l_exp'> }
      <exp> --> <term><exp'>
       <term> --> <prim><term'>
        <prim> --> i <prim'>
         <prim'> --> <index>
          <index> --> e
        <term'> --> e
       <exp'> --> e
      <rel_exp> --> ( < exp >< rel op >< exp > )
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> n
         <term'> --> e
        <exp'> --> e
     <st> −−> <comp_st>
      <comp_st> −−> { <st_list> }
       <set> −−> <st> { <st> }
        <st> −−> return <exp>;
         <exp> --> <term><exp'>
          <term> --> <prim><term'>
           <prim> --> n
           <term'> --> e
          <exp'> --> e
     <st> −−> <comp_st>
      <comp_st> −−> { <st_list> }
       <set> −−> <st> { <st> }
        <st> −−> return <exp>;
         <exp> --> <term><exp'>
          <term> --> <prim><term'>
           <prim> --> n
           <term'> --> e
          <exp'> --> e
    <st> −−> i <st'>
     <st'> −−> <asg_st>
      <set> −−> <st> { <st> }
       <var> −−> i <index>
        <index> --> e
       <asg_st'> --> <exp>
        <exp> --> <term><exp'>
         <term> --> <prim><term'>
          <prim> --> n
          <term'> --> e
         <exp'> --> e
    <st> −−> return <exp>;
     <exp> --> <term><exp'>
      <term> --> <prim><term'>
       <prim> --> n
       <term'> --> e
      <exp'> --> e
Symbol table after parsing deadCodeIfElse
{Definition = i;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

  <funct_def> −−> <type> i ( <par_list> ){{< decl >} <st_list> }
   <type> --> int
   < par_list > --> e
   < decl > −−> < type > <decl'>
    <type> --> int
    <decl’> --> i;
   <set> −−> <st> { <st> }
    <st> −−> if <lexp> <stmt> else <stmt>
     <l_exp> --> <l_exp'> { || <l_exp> }
      <l_exp’> --> <exp> { && <l_exp'> }
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> i <prim'>
          <prim'> --> <index>
           <index> --> e
         <term'> --> e
        <exp'> --> e
       <rel_exp> --> ( < exp >< rel op >< exp > )
        <exp> --> <term><exp'>
         <term> --> <prim><term'>
          <prim> --> n
          <term'> --> e
         <exp'> --> e
      <st> −−> <comp_st>
       <comp_st> −−> { <st_list> }
        <set> −−> <st> { <st> }
         <st> −−> return <exp>;
          <exp> --> <term><exp'>
           <term> --> <prim><term'>
            <prim> --> n
            <term'> --> e
           <exp'> --> e
      <st> −−> <comp_st>
       <comp_st> −−> { <st_list> }
        <set> −−> <st> { <st> }
         <st> −−> i <st'>
          <st'> −−> <asg_st>
           <set> −−> <st> { <st> }
            <var> −−> i <index>
             <index> --> e
            <asg_st'> --> <exp>
             <exp> --> <term><exp'>
              <term> --> <prim><term'>
               <prim> --> n
               <term'> --> e
              <exp'> --> e
     <st> −−> return <exp>;
      <exp> --> <term><exp'>
       <term> --> <prim><term'>
        <prim> --> i <prim'>
         <prim'> --> <index>
          <index> --> e
        <term'> --> e
       <exp'> --> e
Symbol table after parsing validIfElse
{Definition = i;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

   <funct_def> −−> <type> i ( <par_list> ){{< decl >} <st_list> }
    <type> --> int
    < par_list > --> e
    < decl > −−> < type > <decl'>
     <type> --> int
     <decl’> --> i;
    <set> −−> <st> { <st> }
     <st> −−> i <st'>
      <st'> −−> <asg_st>
       <set> −−> <st> { <st> }
        <var> −−> i <index>
         <index> --> e
        <asg_st'> --> <exp>
         <exp> --> <term><exp'>
          <term> --> <prim><term'>
           <prim> --> 'c'
           <term'> --> e
          <exp'> --> e
     <st> −−> return <exp>;
      <exp> --> <term><exp'>
       <term> --> <prim><term'>
        <prim> --> i <prim'>
         <prim'> --> <index>
          <index> --> e
        <term'> --> e
       <exp'> --> e
Symbol table after parsing doesNotTypeCheck
{Definition = i;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

   <funct_def> −−> <type> i ( <par_list> ){{< decl >} <st_list> }
    <type> --> int
    < par_list > --> e
    < decl > −−> < type > <decl'>
     <type> --> char
     <decl’> --> i;
    < decl > −−> < type > <decl'>
     <type> --> char
     <decl’> --> i;
    < decl > −−> < type > <decl'>
     <type> --> int
     <decl’> --> i;
    <set> −−> <st> { <st> }
     <st> −−> i <st'>
      <st'> −−> <asg_st>
       <set> −−> <st> { <st> }
        <var> −−> i <index>
         <index> --> e
        <asg_st'> --> <exp>
         <exp> --> <term><exp'>
          <term> --> <prim><term'>
           <prim> --> i <prim'>
            <prim'> --> <index>
             <index> --> e
           <term'> --> e
          <exp'> --> <add_op><term><exp'>
           <term> --> <prim><term'>
            <prim> --> i <prim'>
             <prim'> --> <index>
              <index> --> e
            <term'> --> e
           <exp'> --> e
     <st> −−> i <st'>
      <st'> −−> <asg_st>
       <set> −−> <st> { <st> }
        <var> −−> i <index>
         <index> --> e
        <asg_st'> --> <exp>
         <exp> --> <term><exp'>
          <term> --> <prim><term'>
           <prim> --> i <prim'>
            <prim'> --> <index>
             <index> --> e
           <term'> --> e
          <exp'> --> <add_op><term><exp'>
           <term> --> <prim><term'>
            <prim> --> i <prim'>
             <prim'> --> <index>
              <index> --> e
            <term'> --> e
           <exp'> --> e
     <st> −−> return <exp>;
      <exp> --> <term><exp'>
       <term> --> <prim><term'>
        <prim> --> n
        <term'> --> e
       <exp'> --> e
Symbol table after parsing mathOnChars
{Definition = a;
 Type = Primitive CharType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = b;
 Type = Primitive CharType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = i;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

   <funct_def> −−> <type> i ( <par_list> ){{< decl >} <st_list> }
    <type> --> int
    < par_list > --> e
    < decl > −−> < type > <decl'>
     <type> --> int
     <decl'> --> [] i = new <type> [ n ];
      <type> --> int
    <set> −−> <st> { <st> }
     <st> −−> System.out. (<v_list>);
      <v_list> --> <elem><v_list'>
       <elem> --> i <index>
        <index> --> e
      <v_list'> --> e
Symbol table after parsing arrayPassToSystemOut
{Definition = a;
 Type = ArrayType IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

   <funct_def> −−> <type> i ( <par_list> ){{< decl >} <st_list> }
    <type> --> int
    < par_list > --> e
    < decl > −−> < type > <decl'>
     <type> --> int
     <decl’> --> i;
    <set> −−> <st> { <st> }
     <st> −−> i <st'>
      <st'> −−> <asg_st>
       <set> −−> <st> { <st> }
        <var> −−> i <index>
         <index> --> e
        <asg_st'> --> System.in.<type>()
         <type> --> char
     <st> −−> return <exp>;
      <exp> --> <term><exp'>
       <term> --> <prim><term'>
        <prim> --> i <prim'>
         <prim'> --> <index>
          <index> --> e
        <term'> --> e
       <exp'> --> e
Symbol table after parsing systemInError
{Definition = i;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

   <funct_def> −−> <type> i ( <par_list> ){{< decl >} <st_list> }
    <type> --> int
    <par_list> −−> <p_type> i{, <p_type> i}
     <p_type> --> <type> <p_type’>
      <type> --> int
      <p_type’> --> e
     < decl > −−> < type > <decl'>
      <type> --> int
      <decl’> --> i;
     <set> −−> <st> { <st> }
      <st> −−> i <st'>
       <st'> −−> <asg_st>
        <set> −−> <st> { <st> }
         <var> −−> i <index>
          <index> --> e
         <asg_st'> --> <exp>
          <exp> --> <term><exp'>
           <term> --> <prim><term'>
            <prim> --> i <prim'>
             <prim'> --> (<v_list>)
              <v_list> --> <elem><v_list'>
               <elem> --> 'c'
              <v_list'> --> e
            <term'> --> e
           <exp'> --> e
      <st> −−> return <exp>;
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> i <prim'>
          <prim'> --> <index>
           <index> --> e
         <term'> --> e
        <exp'> --> e
Symbol table after parsing wrongArgumentType
{Definition = i;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = x;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

