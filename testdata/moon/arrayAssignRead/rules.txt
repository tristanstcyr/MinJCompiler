< prg > −− > class i {{< decl >} < main f > {< funct_def >}}
 <main_f> −−> void main(){{< decl >} < st list > }
  < decl > −−> < type > <decl'>
   <type> --> int
   <decl'> --> [] i = new <type> [ n ];
    <type> --> int
  < decl > −−> < type > <decl'>
   <type> --> int
   <decl’> --> i;
  < decl > −−> < type > <decl'>
   <type> --> int
   <decl’> --> i;
  < decl > −−> < type > <decl'>
   <type> --> int
   <decl’> --> i;
  <set> −−> <st> { <st> }
   <st> −−> i <st'>
    <st'> −−> <asg_st>
     <set> −−> <st> { <st> }
      <var> −−> i <index>
       <index> --> e
      <asg_st'> --> <exp>
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> n
         <term'> --> e
        <exp'> --> e
   <st> −−> i <st'>
    <st'> −−> <asg_st>
     <set> −−> <st> { <st> }
      <var> −−> i <index>
       <index> --> e
      <asg_st'> --> <exp>
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> n
         <term'> --> e
        <exp'> --> e
   <st> −−> while <l_exp><st>
    <l_exp> --> <l_exp'> { || <l_exp> }
     <l_exp’> --> <exp> { && <l_exp'> }
      <exp> --> <term><exp'>
       <term> --> <prim><term'>
        <prim> --> i <prim'>
         <prim'> --> <index>
          <index> --> e
        <term'> --> e
       <exp'> --> e
      <rel_exp> --> ( < exp >< rel op >< exp > )
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> i <prim'>
          <prim'> --> <index>
           <index> --> e
         <term'> --> e
        <exp'> --> e
     <st> −−> <comp_st>
      <comp_st> −−> { <st_list> }
       <set> −−> <st> { <st> }
        <st> −−> i <st'>
         <st'> −−> <asg_st>
          <set> −−> <st> { <st> }
           <var> −−> i <index>
            <index> --> [<exp>]
             <exp> --> <term><exp'>
              <term> --> <prim><term'>
               <prim> --> i <prim'>
                <prim'> --> <index>
                 <index> --> e
               <term'> --> e
              <exp'> --> e
           <asg_st'> --> <exp>
            <exp> --> <term><exp'>
             <term> --> <prim><term'>
              <prim> --> i <prim'>
               <prim'> --> <index>
                <index> --> e
              <term'> --> e
             <exp'> --> e
        <st> −−> i <st'>
         <st'> −−> <asg_st>
          <set> −−> <st> { <st> }
           <var> −−> i <index>
            <index> --> e
           <asg_st'> --> <exp>
            <exp> --> <term><exp'>
             <term> --> <prim><term'>
              <prim> --> i <prim'>
               <prim'> --> <index>
                <index> --> e
              <term'> --> e
             <exp'> --> <add_op><term><exp'>
              <term> --> <prim><term'>
               <prim> --> n
               <term'> --> e
              <exp'> --> e
    <st> −−> i <st'>
     <st'> −−> <asg_st>
      <set> −−> <st> { <st> }
       <var> −−> i <index>
        <index> --> e
       <asg_st'> --> <exp>
        <exp> --> <term><exp'>
         <term> --> <prim><term'>
          <prim> --> n
          <term'> --> e
         <exp'> --> e
    <st> −−> while <l_exp><st>
     <l_exp> --> <l_exp'> { || <l_exp> }
      <l_exp’> --> <exp> { && <l_exp'> }
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> i <prim'>
          <prim'> --> <index>
           <index> --> e
         <term'> --> e
        <exp'> --> e
       <rel_exp> --> ( < exp >< rel op >< exp > )
        <exp> --> <term><exp'>
         <term> --> <prim><term'>
          <prim> --> i <prim'>
           <prim'> --> <index>
            <index> --> e
          <term'> --> e
         <exp'> --> e
      <st> −−> <comp_st>
       <comp_st> −−> { <st_list> }
        <set> −−> <st> { <st> }
         <st> −−> i <st'>
          <st'> −−> <asg_st>
           <set> −−> <st> { <st> }
            <var> −−> i <index>
             <index> --> e
            <asg_st'> --> <exp>
             <exp> --> <term><exp'>
              <term> --> <prim><term'>
               <prim> --> i <prim'>
                <prim'> --> <index>
                 <index> --> [<exp>]
                  <exp> --> <term><exp'>
                   <term> --> <prim><term'>
                    <prim> --> i <prim'>
                     <prim'> --> <index>
                      <index> --> e
                    <term'> --> e
                   <exp'> --> e
               <term'> --> e
              <exp'> --> <add_op><term><exp'>
               <term> --> <prim><term'>
                <prim> --> n
                <term'> --> e
               <exp'> --> e
         <st> −−> System.out. (<v_list>);
          <v_list> --> <elem><v_list'>
           <elem> --> i <index>
            <index> --> e
          <v_list'> --> e
         <st> −−> i <st'>
          <st'> −−> <asg_st>
           <set> −−> <st> { <st> }
            <var> −−> i <index>
             <index> --> e
            <asg_st'> --> <exp>
             <exp> --> <term><exp'>
              <term> --> <prim><term'>
               <prim> --> i <prim'>
                <prim'> --> <index>
                 <index> --> e
               <term'> --> e
              <exp'> --> <add_op><term><exp'>
               <term> --> <prim><term'>
                <prim> --> n
                <term'> --> e
               <exp'> --> e
Symbol table after parsing "main"
{Definition = data;
 Type = ArrayType IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = i;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = size;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

