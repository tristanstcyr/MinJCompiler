< prg > −− > class i {{< decl >} < main f > {< f unct def >}}
 <main_f> −−> void main(){{< decl >} < st list > }
  <set> −−> <st> { <st> }
   <st> −−> i <st'>
    <st'> −−> (v_list)
     <v_list> --> <elem><v_list'>
      <elem> --> n
    <v_list'> --> e
  <st> −−> i <st'>
   <st'> −−> (v_list)
    <v_list> --> <elem><v_list'>
     <elem> --> n
   <v_list'> --> e
 <st> −−> i <st'>
  <st'> −−> (v_list)
   <v_list> --> <elem><v_list'>
    <elem> --> n
  <v_list'> --> e
Symbol table after parsing "main"

< funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
<type> --> int
<par_list> −−> < p type > i{, < p type > i}
<p_type> --> <type> <p_type’>
 <type> --> int
 <p_type’> --> e
< decl > −−> < type > <decl'>
 <type> --> int
 <decl’> --> i;
<set> −−> <st> { <st> }
 <st> −−> i <st'>
  <st'> −−> <asg_st>
   <set> −−> <st> { <st> }
    <var> −−> i <index>
     <index> --> e
    <asg_st'> --> <exp>
     <exp> --> <term><exp'>
      <term> --> <prim><term'>
       <prim> --> n
       <term'> --> e
      <exp'> --> <add_op><term><exp'>
       <term> --> <prim><term'>
        <prim> --> n
        <term'> --> <mult_op><prim><term'>
         <prim> --> n
         <term'> --> e
       <exp'> --> e
 <st> −−> return <exp>;
  <exp> --> <term><exp'>
   <term> --> <prim><term'>
    <prim> --> i <prim'>
     <prim'> --> (<v_list>)
      <v_list> --> <elem><v_list'>
       <elem> --> i <index>
        <index> --> e
      <v_list'> --> ,<v_list'>
       <v_list> --> <elem><v_list'>
        <elem> --> n
      <v_list'> --> e
   <term'> --> e
  <exp'> --> e
Symbol table after parsing testOperatorPriority
{Definition = i;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

< funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
<type> --> int
<par_list> −−> < p type > i{, < p type > i}
<p_type> --> <type> <p_type’>
 <type> --> int
 <p_type’> --> e
< decl > −−> < type > <decl'>
 <type> --> int
 <decl’> --> i;
<set> −−> <st> { <st> }
 <st> −−> i <st'>
  <st'> −−> <asg_st>
   <set> −−> <st> { <st> }
    <var> −−> i <index>
     <index> --> e
    <asg_st'> --> <exp>
     <exp> --> <term><exp'>
      <term> --> <prim><term'>
       <prim> --> (<exp>)
        <exp> --> <term><exp'>
         <term> --> <prim><term'>
          <prim> --> n
          <term'> --> e
         <exp'> --> <add_op><term><exp'>
          <term> --> <prim><term'>
           <prim> --> n
           <term'> --> e
          <exp'> --> e
       <term'> --> <mult_op><prim><term'>
        <prim> --> n
        <term'> --> e
      <exp'> --> e
 <st> −−> return <exp>;
  <exp> --> <term><exp'>
   <term> --> <prim><term'>
    <prim> --> i <prim'>
     <prim'> --> (<v_list>)
      <v_list> --> <elem><v_list'>
       <elem> --> i <index>
        <index> --> e
      <v_list'> --> ,<v_list'>
       <v_list> --> <elem><v_list'>
        <elem> --> n
      <v_list'> --> e
   <term'> --> e
  <exp'> --> e
Symbol table after parsing testParenthesis
{Definition = i;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

< funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
<type> --> int
<par_list> −−> < p type > i{, < p type > i}
<p_type> --> <type> <p_type’>
 <type> --> int
 <p_type’> --> e
< decl > −−> < type > <decl'>
 <type> --> int
 <decl’> --> i;
< decl > −−> < type > <decl'>
 <type> --> int
 <decl’> --> i;
<set> −−> <st> { <st> }
 <st> −−> i <st'>
  <st'> −−> <asg_st>
   <set> −−> <st> { <st> }
    <var> −−> i <index>
     <index> --> e
    <asg_st'> --> <exp>
     <exp> --> -<term><exp'>
      <term> --> <prim><term'>
       <prim> --> n
       <term'> --> e
      <exp'> --> e
 <st> −−> i <st'>
  <st'> −−> <asg_st>
   <set> −−> <st> { <st> }
    <var> −−> i <index>
     <index> --> e
    <asg_st'> --> <exp>
     <exp> --> <term><exp'>
      <term> --> <prim><term'>
       <prim> --> n
       <term'> --> e
      <exp'> --> <add_op><term><exp'>
       <term> --> <prim><term'>
        <prim> --> n
        <term'> --> e
       <exp'> --> e
 <st> −−> return <exp>;
  <exp> --> <term><exp'>
   <term> --> <prim><term'>
    <prim> --> i <prim'>
     <prim'> --> (<v_list>)
      <v_list> --> <elem><v_list'>
       <elem> --> i <index>
        <index> --> e
      <v_list'> --> ,<v_list'>
       <v_list> --> <elem><v_list'>
        <elem> --> i <index>
         <index> --> e
       <v_list'> --> e
    <term'> --> e
   <exp'> --> e
Symbol table after parsing testNegation
{Definition = i;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = b;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

< funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
<type> --> int
<par_list> −−> < p type > i{, < p type > i}
 <p_type> --> <type> <p_type’>
  <type> --> int
  <p_type’> --> e
 <par_list> −−> < p type > i{, < p type > i}
  <p_type> --> <type> <p_type’>
   <type> --> int
   <p_type’> --> e
  <set> −−> <st> { <st> }
   <st> −−> if <lexp> <stmt> else <stmt>
    <l_exp> --> <l_exp'> { || <l_exp> }
     <l_exp’> --> <exp> { && <l_exp'> }
      <exp> --> <term><exp'>
       <term> --> <prim><term'>
        <prim> --> i <prim'>
         <prim'> --> <index>
          <index> --> e
        <term'> --> e
       <exp'> --> e
      <rel_exp> --> ( < exp >< rel op >< exp > )
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> i <prim'>
          <prim'> --> <index>
           <index> --> e
         <term'> --> e
        <exp'> --> e
     <st> −−> <comp_st>
      <comp_st> −−> { <st_list> }
       <set> −−> <st> { <st> }
        <st> −−> System.out. (<v_list>);
         <v_list> --> <elem><v_list'>
          <elem> --> 'c'
         <v_list'> --> ,<v_list'>
          <v_list> --> <elem><v_list'>
           <elem> --> 'c'
          <v_list'> --> ,<v_list'>
           <v_list> --> <elem><v_list'>
            <elem> --> 'c'
           <v_list'> --> ,<v_list'>
            <v_list> --> <elem><v_list'>
             <elem> --> 'c'
            <v_list'> --> ,<v_list'>
             <v_list> --> <elem><v_list'>
              <elem> --> 'c'
             <v_list'> --> e
     <st> −−> <comp_st>
      <comp_st> −−> { <st_list> }
       <set> −−> <st> { <st> }
        <st> −−> System.out. (<v_list>);
         <v_list> --> <elem><v_list'>
          <elem> --> 'c'
         <v_list'> --> ,<v_list'>
          <v_list> --> <elem><v_list'>
           <elem> --> 'c'
          <v_list'> --> ,<v_list'>
           <v_list> --> <elem><v_list'>
            <elem> --> 'c'
           <v_list'> --> ,<v_list'>
            <v_list> --> <elem><v_list'>
             <elem> --> 'c'
            <v_list'> --> ,<v_list'>
             <v_list> --> <elem><v_list'>
              <elem> --> 'c'
             <v_list'> --> ,<v_list'>
              <v_list> --> <elem><v_list'>
               <elem> --> 'c'
              <v_list'> --> ,<v_list'>
               <v_list> --> <elem><v_list'>
                <elem> --> 'c'
               <v_list'> --> e
        <st> −−> i <st'>
         <st'> −−> (v_list)
          <v_list> --> <elem><v_list'>
           <elem> --> i <index>
            <index> --> e
          <v_list'> --> e
        <st> −−> System.out. (<v_list>);
         <v_list> --> <elem><v_list'>
          <elem> --> 'c'
         <v_list'> --> ,<v_list'>
          <v_list> --> <elem><v_list'>
           <elem> --> 'c'
          <v_list'> --> ,<v_list'>
           <v_list> --> <elem><v_list'>
            <elem> --> 'c'
           <v_list'> --> e
        <st> −−> i <st'>
         <st'> −−> (v_list)
          <v_list> --> <elem><v_list'>
           <elem> --> i <index>
            <index> --> e
          <v_list'> --> e
        <st> −−> System.out. (<v_list>);
         <v_list> --> <elem><v_list'>
          <elem> --> 'c'
         <v_list'> --> e
    <st> −−> return <exp>;
     <exp> --> <term><exp'>
      <term> --> <prim><term'>
       <prim> --> n
       <term'> --> e
      <exp'> --> e
Symbol table after parsing equals
{Definition = actual;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = expected;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}

  < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
   <type> --> int
   <par_list> −−> < p type > i{, < p type > i}
    <p_type> --> <type> <p_type’>
     <type> --> int
     <p_type’> --> e
    <set> −−> <st> { <st> }
     <st> −−> if <lexp> <stmt> else <stmt>
      <l_exp> --> <l_exp'> { || <l_exp> }
       <l_exp’> --> <exp> { && <l_exp'> }
        <exp> --> <term><exp'>
         <term> --> <prim><term'>
          <prim> --> i <prim'>
           <prim'> --> <index>
            <index> --> e
          <term'> --> e
         <exp'> --> e
        <rel_exp> --> ( < exp >< rel op >< exp > )
         <exp> --> <term><exp'>
          <term> --> <prim><term'>
           <prim> --> n
           <term'> --> e
          <exp'> --> e
       <st> −−> System.out. (<v_list>);
        <v_list> --> <elem><v_list'>
         <elem> --> 'c'
        <v_list'> --> e
       <st> −−> if <lexp> <stmt> else <stmt>
        <l_exp> --> <l_exp'> { || <l_exp> }
         <l_exp’> --> <exp> { && <l_exp'> }
          <exp> --> <term><exp'>
           <term> --> <prim><term'>
            <prim> --> i <prim'>
             <prim'> --> <index>
              <index> --> e
            <term'> --> e
           <exp'> --> e
          <rel_exp> --> ( < exp >< rel op >< exp > )
           <exp> --> <term><exp'>
            <term> --> <prim><term'>
             <prim> --> n
             <term'> --> e
            <exp'> --> e
         <st> −−> <comp_st>
          <comp_st> −−> { <st_list> }
           <set> −−> <st> { <st> }
            <st> −−> System.out. (<v_list>);
             <v_list> --> <elem><v_list'>
              <elem> --> 'c'
             <v_list'> --> e
            <st> −−> i <st'>
             <st'> −−> <asg_st>
              <set> −−> <st> { <st> }
               <var> −−> i <index>
                <index> --> e
               <asg_st'> --> <exp>
                <exp> --> -<term><exp'>
                 <term> --> <prim><term'>
                  <prim> --> i <prim'>
                   <prim'> --> <index>
                    <index> --> e
                  <term'> --> e
                 <exp'> --> e
         <st> −−> ;
       <st> −−> i <st'>
        <st'> −−> (v_list)
         <v_list> --> <elem><v_list'>
          <elem> --> i <index>
           <index> --> e
         <v_list'> --> e
       <st> −−> return <exp>;
        <exp> --> <term><exp'>
         <term> --> <prim><term'>
          <prim> --> n
          <term'> --> e
         <exp'> --> e
Symbol table after parsing printNumber
{Definition = number;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}

     < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
      <type> --> int
      <par_list> −−> < p type > i{, < p type > i}
       <p_type> --> <type> <p_type’>
        <type> --> int
        <p_type’> --> e
       < decl > −−> < type > <decl'>
        <type> --> int
        <decl’> --> i;
       < decl > −−> < type > <decl'>
        <type> --> int
        <decl’> --> i;
       <set> −−> <st> { <st> }
        <st> −−> if <lexp> <stmt> else <stmt>
         <l_exp> --> <l_exp'> { || <l_exp> }
          <l_exp’> --> <exp> { && <l_exp'> }
           <exp> --> <term><exp'>
            <term> --> <prim><term'>
             <prim> --> i <prim'>
              <prim'> --> <index>
               <index> --> e
             <term'> --> e
            <exp'> --> e
           <rel_exp> --> ( < exp >< rel op >< exp > )
            <exp> --> <term><exp'>
             <term> --> <prim><term'>
              <prim> --> n
              <term'> --> e
             <exp'> --> e
          <st> −−> <comp_st>
           <comp_st> −−> { <st_list> }
            <set> −−> <st> { <st> }
             <st> −−> i <st'>
              <st'> −−> <asg_st>
               <set> −−> <st> { <st> }
                <var> −−> i <index>
                 <index> --> e
                <asg_st'> --> <exp>
                 <exp> --> <term><exp'>
                  <term> --> <prim><term'>
                   <prim> --> i <prim'>
                    <prim'> --> <index>
                     <index> --> e
                   <term'> --> <mult_op><prim><term'>
                    <prim> --> n
                    <term'> --> e
                  <exp'> --> e
             <st> −−> i <st'>
              <st'> −−> <asg_st>
               <set> −−> <st> { <st> }
                <var> −−> i <index>
                 <index> --> e
                <asg_st'> --> <exp>
                 <exp> --> <term><exp'>
                  <term> --> <prim><term'>
                   <prim> --> i <prim'>
                    <prim'> --> <index>
                     <index> --> e
                   <term'> --> <mult_op><prim><term'>
                    <prim> --> n
                    <term'> --> e
                  <exp'> --> e
             <st> −−> i <st'>
              <st'> −−> (v_list)
               <v_list> --> <elem><v_list'>
                <elem> --> i <index>
                 <index> --> e
               <v_list'> --> e
             <st> −−> i <st'>
              <st'> −−> <asg_st>
               <set> −−> <st> { <st> }
                <var> −−> i <index>
                 <index> --> e
                <asg_st'> --> <exp>
                 <exp> --> <term><exp'>
                  <term> --> <prim><term'>
                   <prim> --> i <prim'>
                    <prim'> --> <index>
                     <index> --> e
                   <term'> --> e
                  <exp'> --> <add_op><term><exp'>
                   <term> --> <prim><term'>
                    <prim> --> n
                    <term'> --> e
                   <exp'> --> e
             <st> −−> System.out. (<v_list>);
              <v_list> --> <elem><v_list'>
               <elem> --> i <index>
                <index> --> e
              <v_list'> --> e
          <st> −−> ;
         <st> −−> return <exp>;
          <exp> --> <term><exp'>
           <term> --> <prim><term'>
            <prim> --> n
            <term'> --> e
           <exp'> --> e
Symbol table after parsing rec_printNumber
{Definition = number;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = rest;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = div;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

       < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
        <type> --> int
        <par_list> −−> < p type > i{, < p type > i}
         <p_type> --> <type> <p_type’>
          <type> --> int
          <p_type’> --> e
         < decl > −−> < type > <decl'>
          <type> --> int
          <decl’> --> i;
         <set> −−> <st> { <st> }
          <st> −−> i <st'>
           <st'> −−> <asg_st>
            <set> −−> <st> { <st> }
             <var> −−> i <index>
              <index> --> e
             <asg_st'> --> <exp>
              <exp> --> <term><exp'>
               <term> --> <prim><term'>
                <prim> --> n
                <term'> --> e
               <exp'> --> <add_op><term><exp'>
                <term> --> <prim><term'>
                 <prim> --> n
                 <term'> --> <mult_op><prim><term'>
                  <prim> --> n
                  <term'> --> e
                <exp'> --> e
          <st> −−> return <exp>;
           <exp> --> <term><exp'>
            <term> --> <prim><term'>
             <prim> --> i <prim'>
              <prim'> --> (<v_list>)
               <v_list> --> <elem><v_list'>
                <elem> --> i <index>
                 <index> --> e
               <v_list'> --> ,<v_list'>
                <v_list> --> <elem><v_list'>
                 <elem> --> n
               <v_list'> --> e
            <term'> --> e
           <exp'> --> e
Symbol table after parsing testOperatorPriority2
{Definition = i;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

       < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
        <type> --> int
        <par_list> −−> < p type > i{, < p type > i}
         <p_type> --> <type> <p_type’>
          <type> --> int
          <p_type’> --> e
         < decl > −−> < type > <decl'>
          <type> --> int
          <decl’> --> i;
         <set> −−> <st> { <st> }
          <st> −−> i <st'>
           <st'> −−> <asg_st>
            <set> −−> <st> { <st> }
             <var> −−> i <index>
              <index> --> e
             <asg_st'> --> <exp>
              <exp> --> <term><exp'>
               <term> --> <prim><term'>
                <prim> --> (<exp>)
                 <exp> --> <term><exp'>
                  <term> --> <prim><term'>
                   <prim> --> n
                   <term'> --> e
                  <exp'> --> <add_op><term><exp'>
                   <term> --> <prim><term'>
                    <prim> --> n
                    <term'> --> e
                   <exp'> --> e
                <term'> --> <mult_op><prim><term'>
                 <prim> --> n
                 <term'> --> e
               <exp'> --> e
          <st> −−> return <exp>;
           <exp> --> <term><exp'>
            <term> --> <prim><term'>
             <prim> --> i <prim'>
              <prim'> --> (<v_list>)
               <v_list> --> <elem><v_list'>
                <elem> --> i <index>
                 <index> --> e
               <v_list'> --> ,<v_list'>
                <v_list> --> <elem><v_list'>
                 <elem> --> n
               <v_list'> --> e
            <term'> --> e
           <exp'> --> e
Symbol table after parsing testParenthesis2
{Definition = i;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

       < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
        <type> --> int
        <par_list> −−> < p type > i{, < p type > i}
         <p_type> --> <type> <p_type’>
          <type> --> int
          <p_type’> --> e
         < decl > −−> < type > <decl'>
          <type> --> int
          <decl’> --> i;
         < decl > −−> < type > <decl'>
          <type> --> int
          <decl’> --> i;
         <set> −−> <st> { <st> }
          <st> −−> i <st'>
           <st'> −−> <asg_st>
            <set> −−> <st> { <st> }
             <var> −−> i <index>
              <index> --> e
             <asg_st'> --> <exp>
              <exp> --> -<term><exp'>
               <term> --> <prim><term'>
                <prim> --> n
                <term'> --> e
               <exp'> --> e
          <st> −−> i <st'>
           <st'> −−> <asg_st>
            <set> −−> <st> { <st> }
             <var> −−> i <index>
              <index> --> e
             <asg_st'> --> <exp>
              <exp> --> <term><exp'>
               <term> --> <prim><term'>
                <prim> --> n
                <term'> --> e
               <exp'> --> <add_op><term><exp'>
                <term> --> <prim><term'>
                 <prim> --> n
                 <term'> --> e
                <exp'> --> e
          <st> −−> return <exp>;
           <exp> --> <term><exp'>
            <term> --> <prim><term'>
             <prim> --> i <prim'>
              <prim'> --> (<v_list>)
               <v_list> --> <elem><v_list'>
                <elem> --> i <index>
                 <index> --> e
               <v_list'> --> ,<v_list'>
                <v_list> --> <elem><v_list'>
                 <elem> --> i <index>
                  <index> --> e
                <v_list'> --> e
             <term'> --> e
            <exp'> --> e
Symbol table after parsing testNegation2
{Definition = i;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = b;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

        < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
         <type> --> int
         <par_list> −−> < p type > i{, < p type > i}
          <p_type> --> <type> <p_type’>
           <type> --> int
           <p_type’> --> e
          <par_list> −−> < p type > i{, < p type > i}
           <p_type> --> <type> <p_type’>
            <type> --> int
            <p_type’> --> e
           <set> −−> <st> { <st> }
            <st> −−> if <lexp> <stmt> else <stmt>
             <l_exp> --> <l_exp'> { || <l_exp> }
              <l_exp’> --> <exp> { && <l_exp'> }
               <exp> --> <term><exp'>
                <term> --> <prim><term'>
                 <prim> --> i <prim'>
                  <prim'> --> <index>
                   <index> --> e
                 <term'> --> e
                <exp'> --> e
               <rel_exp> --> ( < exp >< rel op >< exp > )
                <exp> --> <term><exp'>
                 <term> --> <prim><term'>
                  <prim> --> i <prim'>
                   <prim'> --> <index>
                    <index> --> e
                  <term'> --> e
                 <exp'> --> e
              <st> −−> <comp_st>
               <comp_st> −−> { <st_list> }
                <set> −−> <st> { <st> }
                 <st> −−> System.out. (<v_list>);
                  <v_list> --> <elem><v_list'>
                   <elem> --> 'c'
                  <v_list'> --> ,<v_list'>
                   <v_list> --> <elem><v_list'>
                    <elem> --> 'c'
                   <v_list'> --> ,<v_list'>
                    <v_list> --> <elem><v_list'>
                     <elem> --> 'c'
                    <v_list'> --> ,<v_list'>
                     <v_list> --> <elem><v_list'>
                      <elem> --> 'c'
                     <v_list'> --> ,<v_list'>
                      <v_list> --> <elem><v_list'>
                       <elem> --> 'c'
                      <v_list'> --> e
              <st> −−> <comp_st>
               <comp_st> −−> { <st_list> }
                <set> −−> <st> { <st> }
                 <st> −−> System.out. (<v_list>);
                  <v_list> --> <elem><v_list'>
                   <elem> --> 'c'
                  <v_list'> --> ,<v_list'>
                   <v_list> --> <elem><v_list'>
                    <elem> --> 'c'
                   <v_list'> --> ,<v_list'>
                    <v_list> --> <elem><v_list'>
                     <elem> --> 'c'
                    <v_list'> --> ,<v_list'>
                     <v_list> --> <elem><v_list'>
                      <elem> --> 'c'
                     <v_list'> --> ,<v_list'>
                      <v_list> --> <elem><v_list'>
                       <elem> --> 'c'
                      <v_list'> --> ,<v_list'>
                       <v_list> --> <elem><v_list'>
                        <elem> --> 'c'
                       <v_list'> --> ,<v_list'>
                        <v_list> --> <elem><v_list'>
                         <elem> --> 'c'
                        <v_list'> --> e
                 <st> −−> i <st'>
                  <st'> −−> (v_list)
                   <v_list> --> <elem><v_list'>
                    <elem> --> i <index>
                     <index> --> e
                   <v_list'> --> e
                 <st> −−> System.out. (<v_list>);
                  <v_list> --> <elem><v_list'>
                   <elem> --> 'c'
                  <v_list'> --> ,<v_list'>
                   <v_list> --> <elem><v_list'>
                    <elem> --> 'c'
                   <v_list'> --> ,<v_list'>
                    <v_list> --> <elem><v_list'>
                     <elem> --> 'c'
                    <v_list'> --> e
                 <st> −−> i <st'>
                  <st'> −−> (v_list)
                   <v_list> --> <elem><v_list'>
                    <elem> --> i <index>
                     <index> --> e
                   <v_list'> --> e
                 <st> −−> System.out. (<v_list>);
                  <v_list> --> <elem><v_list'>
                   <elem> --> 'c'
                  <v_list'> --> e
             <st> −−> return <exp>;
              <exp> --> <term><exp'>
               <term> --> <prim><term'>
                <prim> --> n
                <term'> --> e
               <exp'> --> e
Symbol table after parsing equals2
{Definition = actual;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = expected;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}

           < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
            <type> --> int
            <par_list> −−> < p type > i{, < p type > i}
             <p_type> --> <type> <p_type’>
              <type> --> int
              <p_type’> --> e
             <set> −−> <st> { <st> }
              <st> −−> if <lexp> <stmt> else <stmt>
               <l_exp> --> <l_exp'> { || <l_exp> }
                <l_exp’> --> <exp> { && <l_exp'> }
                 <exp> --> <term><exp'>
                  <term> --> <prim><term'>
                   <prim> --> i <prim'>
                    <prim'> --> <index>
                     <index> --> e
                   <term'> --> e
                  <exp'> --> e
                 <rel_exp> --> ( < exp >< rel op >< exp > )
                  <exp> --> <term><exp'>
                   <term> --> <prim><term'>
                    <prim> --> n
                    <term'> --> e
                   <exp'> --> e
                <st> −−> System.out. (<v_list>);
                 <v_list> --> <elem><v_list'>
                  <elem> --> 'c'
                 <v_list'> --> e
                <st> −−> if <lexp> <stmt> else <stmt>
                 <l_exp> --> <l_exp'> { || <l_exp> }
                  <l_exp’> --> <exp> { && <l_exp'> }
                   <exp> --> <term><exp'>
                    <term> --> <prim><term'>
                     <prim> --> i <prim'>
                      <prim'> --> <index>
                       <index> --> e
                     <term'> --> e
                    <exp'> --> e
                   <rel_exp> --> ( < exp >< rel op >< exp > )
                    <exp> --> <term><exp'>
                     <term> --> <prim><term'>
                      <prim> --> n
                      <term'> --> e
                     <exp'> --> e
                  <st> −−> <comp_st>
                   <comp_st> −−> { <st_list> }
                    <set> −−> <st> { <st> }
                     <st> −−> System.out. (<v_list>);
                      <v_list> --> <elem><v_list'>
                       <elem> --> 'c'
                      <v_list'> --> e
                     <st> −−> i <st'>
                      <st'> −−> <asg_st>
                       <set> −−> <st> { <st> }
                        <var> −−> i <index>
                         <index> --> e
                        <asg_st'> --> <exp>
                         <exp> --> -<term><exp'>
                          <term> --> <prim><term'>
                           <prim> --> i <prim'>
                            <prim'> --> <index>
                             <index> --> e
                           <term'> --> e
                          <exp'> --> e
                  <st> −−> ;
                <st> −−> i <st'>
                 <st'> −−> (v_list)
                  <v_list> --> <elem><v_list'>
                   <elem> --> i <index>
                    <index> --> e
                  <v_list'> --> e
                <st> −−> return <exp>;
                 <exp> --> <term><exp'>
                  <term> --> <prim><term'>
                   <prim> --> n
                   <term'> --> e
                  <exp'> --> e
Symbol table after parsing printNumber2
{Definition = number;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}

              < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
               <type> --> int
               <par_list> −−> < p type > i{, < p type > i}
                <p_type> --> <type> <p_type’>
                 <type> --> int
                 <p_type’> --> e
                < decl > −−> < type > <decl'>
                 <type> --> int
                 <decl’> --> i;
                < decl > −−> < type > <decl'>
                 <type> --> int
                 <decl’> --> i;
                <set> −−> <st> { <st> }
                 <st> −−> if <lexp> <stmt> else <stmt>
                  <l_exp> --> <l_exp'> { || <l_exp> }
                   <l_exp’> --> <exp> { && <l_exp'> }
                    <exp> --> <term><exp'>
                     <term> --> <prim><term'>
                      <prim> --> i <prim'>
                       <prim'> --> <index>
                        <index> --> e
                      <term'> --> e
                     <exp'> --> e
                    <rel_exp> --> ( < exp >< rel op >< exp > )
                     <exp> --> <term><exp'>
                      <term> --> <prim><term'>
                       <prim> --> n
                       <term'> --> e
                      <exp'> --> e
                   <st> −−> <comp_st>
                    <comp_st> −−> { <st_list> }
                     <set> −−> <st> { <st> }
                      <st> −−> i <st'>
                       <st'> −−> <asg_st>
                        <set> −−> <st> { <st> }
                         <var> −−> i <index>
                          <index> --> e
                         <asg_st'> --> <exp>
                          <exp> --> <term><exp'>
                           <term> --> <prim><term'>
                            <prim> --> i <prim'>
                             <prim'> --> <index>
                              <index> --> e
                            <term'> --> <mult_op><prim><term'>
                             <prim> --> n
                             <term'> --> e
                           <exp'> --> e
                      <st> −−> i <st'>
                       <st'> −−> <asg_st>
                        <set> −−> <st> { <st> }
                         <var> −−> i <index>
                          <index> --> e
                         <asg_st'> --> <exp>
                          <exp> --> <term><exp'>
                           <term> --> <prim><term'>
                            <prim> --> i <prim'>
                             <prim'> --> <index>
                              <index> --> e
                            <term'> --> <mult_op><prim><term'>
                             <prim> --> n
                             <term'> --> e
                           <exp'> --> e
                      <st> −−> i <st'>
                       <st'> −−> (v_list)
                        <v_list> --> <elem><v_list'>
                         <elem> --> i <index>
                          <index> --> e
                        <v_list'> --> e
                      <st> −−> i <st'>
                       <st'> −−> <asg_st>
                        <set> −−> <st> { <st> }
                         <var> −−> i <index>
                          <index> --> e
                         <asg_st'> --> <exp>
                          <exp> --> <term><exp'>
                           <term> --> <prim><term'>
                            <prim> --> i <prim'>
                             <prim'> --> <index>
                              <index> --> e
                            <term'> --> e
                           <exp'> --> <add_op><term><exp'>
                            <term> --> <prim><term'>
                             <prim> --> n
                             <term'> --> e
                            <exp'> --> e
                      <st> −−> System.out. (<v_list>);
                       <v_list> --> <elem><v_list'>
                        <elem> --> i <index>
                         <index> --> e
                       <v_list'> --> e
                   <st> −−> ;
                  <st> −−> return <exp>;
                   <exp> --> <term><exp'>
                    <term> --> <prim><term'>
                     <prim> --> n
                     <term'> --> e
                    <exp'> --> e
Symbol table after parsing rec_printNumber2
{Definition = number;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = rest;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = div;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

                < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
                 <type> --> int
                 <par_list> −−> < p type > i{, < p type > i}
                  <p_type> --> <type> <p_type’>
                   <type> --> int
                   <p_type’> --> e
                  < decl > −−> < type > <decl'>
                   <type> --> int
                   <decl’> --> i;
                  <set> −−> <st> { <st> }
                   <st> −−> i <st'>
                    <st'> −−> <asg_st>
                     <set> −−> <st> { <st> }
                      <var> −−> i <index>
                       <index> --> e
                      <asg_st'> --> <exp>
                       <exp> --> <term><exp'>
                        <term> --> <prim><term'>
                         <prim> --> n
                         <term'> --> e
                        <exp'> --> <add_op><term><exp'>
                         <term> --> <prim><term'>
                          <prim> --> n
                          <term'> --> <mult_op><prim><term'>
                           <prim> --> n
                           <term'> --> e
                         <exp'> --> e
                   <st> −−> return <exp>;
                    <exp> --> <term><exp'>
                     <term> --> <prim><term'>
                      <prim> --> i <prim'>
                       <prim'> --> (<v_list>)
                        <v_list> --> <elem><v_list'>
                         <elem> --> i <index>
                          <index> --> e
                        <v_list'> --> ,<v_list'>
                         <v_list> --> <elem><v_list'>
                          <elem> --> n
                        <v_list'> --> e
                     <term'> --> e
                    <exp'> --> e
Symbol table after parsing testOperatorPriority4
{Definition = i;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

                < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
                 <type> --> int
                 <par_list> −−> < p type > i{, < p type > i}
                  <p_type> --> <type> <p_type’>
                   <type> --> int
                   <p_type’> --> e
                  < decl > −−> < type > <decl'>
                   <type> --> int
                   <decl’> --> i;
                  <set> −−> <st> { <st> }
                   <st> −−> i <st'>
                    <st'> −−> <asg_st>
                     <set> −−> <st> { <st> }
                      <var> −−> i <index>
                       <index> --> e
                      <asg_st'> --> <exp>
                       <exp> --> <term><exp'>
                        <term> --> <prim><term'>
                         <prim> --> (<exp>)
                          <exp> --> <term><exp'>
                           <term> --> <prim><term'>
                            <prim> --> n
                            <term'> --> e
                           <exp'> --> <add_op><term><exp'>
                            <term> --> <prim><term'>
                             <prim> --> n
                             <term'> --> e
                            <exp'> --> e
                         <term'> --> <mult_op><prim><term'>
                          <prim> --> n
                          <term'> --> e
                        <exp'> --> e
                   <st> −−> return <exp>;
                    <exp> --> <term><exp'>
                     <term> --> <prim><term'>
                      <prim> --> i <prim'>
                       <prim'> --> (<v_list>)
                        <v_list> --> <elem><v_list'>
                         <elem> --> i <index>
                          <index> --> e
                        <v_list'> --> ,<v_list'>
                         <v_list> --> <elem><v_list'>
                          <elem> --> n
                        <v_list'> --> e
                     <term'> --> e
                    <exp'> --> e
Symbol table after parsing testParenthesis4
{Definition = i;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

                < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
                 <type> --> int
                 <par_list> −−> < p type > i{, < p type > i}
                  <p_type> --> <type> <p_type’>
                   <type> --> int
                   <p_type’> --> e
                  < decl > −−> < type > <decl'>
                   <type> --> int
                   <decl’> --> i;
                  < decl > −−> < type > <decl'>
                   <type> --> int
                   <decl’> --> i;
                  <set> −−> <st> { <st> }
                   <st> −−> i <st'>
                    <st'> −−> <asg_st>
                     <set> −−> <st> { <st> }
                      <var> −−> i <index>
                       <index> --> e
                      <asg_st'> --> <exp>
                       <exp> --> -<term><exp'>
                        <term> --> <prim><term'>
                         <prim> --> n
                         <term'> --> e
                        <exp'> --> e
                   <st> −−> i <st'>
                    <st'> −−> <asg_st>
                     <set> −−> <st> { <st> }
                      <var> −−> i <index>
                       <index> --> e
                      <asg_st'> --> <exp>
                       <exp> --> <term><exp'>
                        <term> --> <prim><term'>
                         <prim> --> n
                         <term'> --> e
                        <exp'> --> <add_op><term><exp'>
                         <term> --> <prim><term'>
                          <prim> --> n
                          <term'> --> e
                         <exp'> --> e
                   <st> −−> return <exp>;
                    <exp> --> <term><exp'>
                     <term> --> <prim><term'>
                      <prim> --> i <prim'>
                       <prim'> --> (<v_list>)
                        <v_list> --> <elem><v_list'>
                         <elem> --> i <index>
                          <index> --> e
                        <v_list'> --> ,<v_list'>
                         <v_list> --> <elem><v_list'>
                          <elem> --> i <index>
                           <index> --> e
                         <v_list'> --> e
                      <term'> --> e
                     <exp'> --> e
Symbol table after parsing testNegation4
{Definition = i;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = b;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

                 < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
                  <type> --> int
                  <par_list> −−> < p type > i{, < p type > i}
                   <p_type> --> <type> <p_type’>
                    <type> --> int
                    <p_type’> --> e
                   <par_list> −−> < p type > i{, < p type > i}
                    <p_type> --> <type> <p_type’>
                     <type> --> int
                     <p_type’> --> e
                    <set> −−> <st> { <st> }
                     <st> −−> if <lexp> <stmt> else <stmt>
                      <l_exp> --> <l_exp'> { || <l_exp> }
                       <l_exp’> --> <exp> { && <l_exp'> }
                        <exp> --> <term><exp'>
                         <term> --> <prim><term'>
                          <prim> --> i <prim'>
                           <prim'> --> <index>
                            <index> --> e
                          <term'> --> e
                         <exp'> --> e
                        <rel_exp> --> ( < exp >< rel op >< exp > )
                         <exp> --> <term><exp'>
                          <term> --> <prim><term'>
                           <prim> --> i <prim'>
                            <prim'> --> <index>
                             <index> --> e
                           <term'> --> e
                          <exp'> --> e
                       <st> −−> <comp_st>
                        <comp_st> −−> { <st_list> }
                         <set> −−> <st> { <st> }
                          <st> −−> System.out. (<v_list>);
                           <v_list> --> <elem><v_list'>
                            <elem> --> 'c'
                           <v_list'> --> ,<v_list'>
                            <v_list> --> <elem><v_list'>
                             <elem> --> 'c'
                            <v_list'> --> ,<v_list'>
                             <v_list> --> <elem><v_list'>
                              <elem> --> 'c'
                             <v_list'> --> ,<v_list'>
                              <v_list> --> <elem><v_list'>
                               <elem> --> 'c'
                              <v_list'> --> ,<v_list'>
                               <v_list> --> <elem><v_list'>
                                <elem> --> 'c'
                               <v_list'> --> e
                       <st> −−> <comp_st>
                        <comp_st> −−> { <st_list> }
                         <set> −−> <st> { <st> }
                          <st> −−> System.out. (<v_list>);
                           <v_list> --> <elem><v_list'>
                            <elem> --> 'c'
                           <v_list'> --> ,<v_list'>
                            <v_list> --> <elem><v_list'>
                             <elem> --> 'c'
                            <v_list'> --> ,<v_list'>
                             <v_list> --> <elem><v_list'>
                              <elem> --> 'c'
                             <v_list'> --> ,<v_list'>
                              <v_list> --> <elem><v_list'>
                               <elem> --> 'c'
                              <v_list'> --> ,<v_list'>
                               <v_list> --> <elem><v_list'>
                                <elem> --> 'c'
                               <v_list'> --> ,<v_list'>
                                <v_list> --> <elem><v_list'>
                                 <elem> --> 'c'
                                <v_list'> --> ,<v_list'>
                                 <v_list> --> <elem><v_list'>
                                  <elem> --> 'c'
                                 <v_list'> --> e
                          <st> −−> i <st'>
                           <st'> −−> (v_list)
                            <v_list> --> <elem><v_list'>
                             <elem> --> i <index>
                              <index> --> e
                            <v_list'> --> e
                          <st> −−> System.out. (<v_list>);
                           <v_list> --> <elem><v_list'>
                            <elem> --> 'c'
                           <v_list'> --> ,<v_list'>
                            <v_list> --> <elem><v_list'>
                             <elem> --> 'c'
                            <v_list'> --> ,<v_list'>
                             <v_list> --> <elem><v_list'>
                              <elem> --> 'c'
                             <v_list'> --> e
                          <st> −−> i <st'>
                           <st'> −−> (v_list)
                            <v_list> --> <elem><v_list'>
                             <elem> --> i <index>
                              <index> --> e
                            <v_list'> --> e
                          <st> −−> System.out. (<v_list>);
                           <v_list> --> <elem><v_list'>
                            <elem> --> 'c'
                           <v_list'> --> e
                      <st> −−> return <exp>;
                       <exp> --> <term><exp'>
                        <term> --> <prim><term'>
                         <prim> --> n
                         <term'> --> e
                        <exp'> --> e
Symbol table after parsing equals4
{Definition = actual;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = expected;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}

                    < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
                     <type> --> int
                     <par_list> −−> < p type > i{, < p type > i}
                      <p_type> --> <type> <p_type’>
                       <type> --> int
                       <p_type’> --> e
                      <set> −−> <st> { <st> }
                       <st> −−> if <lexp> <stmt> else <stmt>
                        <l_exp> --> <l_exp'> { || <l_exp> }
                         <l_exp’> --> <exp> { && <l_exp'> }
                          <exp> --> <term><exp'>
                           <term> --> <prim><term'>
                            <prim> --> i <prim'>
                             <prim'> --> <index>
                              <index> --> e
                            <term'> --> e
                           <exp'> --> e
                          <rel_exp> --> ( < exp >< rel op >< exp > )
                           <exp> --> <term><exp'>
                            <term> --> <prim><term'>
                             <prim> --> n
                             <term'> --> e
                            <exp'> --> e
                         <st> −−> System.out. (<v_list>);
                          <v_list> --> <elem><v_list'>
                           <elem> --> 'c'
                          <v_list'> --> e
                         <st> −−> if <lexp> <stmt> else <stmt>
                          <l_exp> --> <l_exp'> { || <l_exp> }
                           <l_exp’> --> <exp> { && <l_exp'> }
                            <exp> --> <term><exp'>
                             <term> --> <prim><term'>
                              <prim> --> i <prim'>
                               <prim'> --> <index>
                                <index> --> e
                              <term'> --> e
                             <exp'> --> e
                            <rel_exp> --> ( < exp >< rel op >< exp > )
                             <exp> --> <term><exp'>
                              <term> --> <prim><term'>
                               <prim> --> n
                               <term'> --> e
                              <exp'> --> e
                           <st> −−> <comp_st>
                            <comp_st> −−> { <st_list> }
                             <set> −−> <st> { <st> }
                              <st> −−> System.out. (<v_list>);
                               <v_list> --> <elem><v_list'>
                                <elem> --> 'c'
                               <v_list'> --> e
                              <st> −−> i <st'>
                               <st'> −−> <asg_st>
                                <set> −−> <st> { <st> }
                                 <var> −−> i <index>
                                  <index> --> e
                                 <asg_st'> --> <exp>
                                  <exp> --> -<term><exp'>
                                   <term> --> <prim><term'>
                                    <prim> --> i <prim'>
                                     <prim'> --> <index>
                                      <index> --> e
                                    <term'> --> e
                                   <exp'> --> e
                           <st> −−> ;
                         <st> −−> i <st'>
                          <st'> −−> (v_list)
                           <v_list> --> <elem><v_list'>
                            <elem> --> i <index>
                             <index> --> e
                           <v_list'> --> e
                         <st> −−> return <exp>;
                          <exp> --> <term><exp'>
                           <term> --> <prim><term'>
                            <prim> --> n
                            <term'> --> e
                           <exp'> --> e
Symbol table after parsing printNumber4
{Definition = number;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}

                       < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
                        <type> --> int
                        <par_list> −−> < p type > i{, < p type > i}
                         <p_type> --> <type> <p_type’>
                          <type> --> int
                          <p_type’> --> e
                         < decl > −−> < type > <decl'>
                          <type> --> int
                          <decl’> --> i;
                         < decl > −−> < type > <decl'>
                          <type> --> int
                          <decl’> --> i;
                         <set> −−> <st> { <st> }
                          <st> −−> if <lexp> <stmt> else <stmt>
                           <l_exp> --> <l_exp'> { || <l_exp> }
                            <l_exp’> --> <exp> { && <l_exp'> }
                             <exp> --> <term><exp'>
                              <term> --> <prim><term'>
                               <prim> --> i <prim'>
                                <prim'> --> <index>
                                 <index> --> e
                               <term'> --> e
                              <exp'> --> e
                             <rel_exp> --> ( < exp >< rel op >< exp > )
                              <exp> --> <term><exp'>
                               <term> --> <prim><term'>
                                <prim> --> n
                                <term'> --> e
                               <exp'> --> e
                            <st> −−> <comp_st>
                             <comp_st> −−> { <st_list> }
                              <set> −−> <st> { <st> }
                               <st> −−> i <st'>
                                <st'> −−> <asg_st>
                                 <set> −−> <st> { <st> }
                                  <var> −−> i <index>
                                   <index> --> e
                                  <asg_st'> --> <exp>
                                   <exp> --> <term><exp'>
                                    <term> --> <prim><term'>
                                     <prim> --> i <prim'>
                                      <prim'> --> <index>
                                       <index> --> e
                                     <term'> --> <mult_op><prim><term'>
                                      <prim> --> n
                                      <term'> --> e
                                    <exp'> --> e
                               <st> −−> i <st'>
                                <st'> −−> <asg_st>
                                 <set> −−> <st> { <st> }
                                  <var> −−> i <index>
                                   <index> --> e
                                  <asg_st'> --> <exp>
                                   <exp> --> <term><exp'>
                                    <term> --> <prim><term'>
                                     <prim> --> i <prim'>
                                      <prim'> --> <index>
                                       <index> --> e
                                     <term'> --> <mult_op><prim><term'>
                                      <prim> --> n
                                      <term'> --> e
                                    <exp'> --> e
                               <st> −−> i <st'>
                                <st'> −−> (v_list)
                                 <v_list> --> <elem><v_list'>
                                  <elem> --> i <index>
                                   <index> --> e
                                 <v_list'> --> e
                               <st> −−> i <st'>
                                <st'> −−> <asg_st>
                                 <set> −−> <st> { <st> }
                                  <var> −−> i <index>
                                   <index> --> e
                                  <asg_st'> --> <exp>
                                   <exp> --> <term><exp'>
                                    <term> --> <prim><term'>
                                     <prim> --> i <prim'>
                                      <prim'> --> <index>
                                       <index> --> e
                                     <term'> --> e
                                    <exp'> --> <add_op><term><exp'>
                                     <term> --> <prim><term'>
                                      <prim> --> n
                                      <term'> --> e
                                     <exp'> --> e
                               <st> −−> System.out. (<v_list>);
                                <v_list> --> <elem><v_list'>
                                 <elem> --> i <index>
                                  <index> --> e
                                <v_list'> --> e
                            <st> −−> ;
                           <st> −−> return <exp>;
                            <exp> --> <term><exp'>
                             <term> --> <prim><term'>
                              <prim> --> n
                              <term'> --> e
                             <exp'> --> e
Symbol table after parsing rec_printNumber4
{Definition = number;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = rest;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = div;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

                         < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
                          <type> --> int
                          <par_list> −−> < p type > i{, < p type > i}
                           <p_type> --> <type> <p_type’>
                            <type> --> int
                            <p_type’> --> e
                           < decl > −−> < type > <decl'>
                            <type> --> int
                            <decl’> --> i;
                           <set> −−> <st> { <st> }
                            <st> −−> i <st'>
                             <st'> −−> <asg_st>
                              <set> −−> <st> { <st> }
                               <var> −−> i <index>
                                <index> --> e
                               <asg_st'> --> <exp>
                                <exp> --> <term><exp'>
                                 <term> --> <prim><term'>
                                  <prim> --> n
                                  <term'> --> e
                                 <exp'> --> <add_op><term><exp'>
                                  <term> --> <prim><term'>
                                   <prim> --> n
                                   <term'> --> <mult_op><prim><term'>
                                    <prim> --> n
                                    <term'> --> e
                                  <exp'> --> e
                            <st> −−> return <exp>;
                             <exp> --> <term><exp'>
                              <term> --> <prim><term'>
                               <prim> --> i <prim'>
                                <prim'> --> (<v_list>)
                                 <v_list> --> <elem><v_list'>
                                  <elem> --> i <index>
                                   <index> --> e
                                 <v_list'> --> ,<v_list'>
                                  <v_list> --> <elem><v_list'>
                                   <elem> --> n
                                 <v_list'> --> e
                              <term'> --> e
                             <exp'> --> e
Symbol table after parsing testOperatorPriority3
{Definition = i;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

                         < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
                          <type> --> int
                          <par_list> −−> < p type > i{, < p type > i}
                           <p_type> --> <type> <p_type’>
                            <type> --> int
                            <p_type’> --> e
                           < decl > −−> < type > <decl'>
                            <type> --> int
                            <decl’> --> i;
                           <set> −−> <st> { <st> }
                            <st> −−> i <st'>
                             <st'> −−> <asg_st>
                              <set> −−> <st> { <st> }
                               <var> −−> i <index>
                                <index> --> e
                               <asg_st'> --> <exp>
                                <exp> --> <term><exp'>
                                 <term> --> <prim><term'>
                                  <prim> --> (<exp>)
                                   <exp> --> <term><exp'>
                                    <term> --> <prim><term'>
                                     <prim> --> n
                                     <term'> --> e
                                    <exp'> --> <add_op><term><exp'>
                                     <term> --> <prim><term'>
                                      <prim> --> n
                                      <term'> --> e
                                     <exp'> --> e
                                  <term'> --> <mult_op><prim><term'>
                                   <prim> --> n
                                   <term'> --> e
                                 <exp'> --> e
                            <st> −−> return <exp>;
                             <exp> --> <term><exp'>
                              <term> --> <prim><term'>
                               <prim> --> i <prim'>
                                <prim'> --> (<v_list>)
                                 <v_list> --> <elem><v_list'>
                                  <elem> --> i <index>
                                   <index> --> e
                                 <v_list'> --> ,<v_list'>
                                  <v_list> --> <elem><v_list'>
                                   <elem> --> n
                                 <v_list'> --> e
                              <term'> --> e
                             <exp'> --> e
Symbol table after parsing testParenthesis3
{Definition = i;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

                         < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
                          <type> --> int
                          <par_list> −−> < p type > i{, < p type > i}
                           <p_type> --> <type> <p_type’>
                            <type> --> int
                            <p_type’> --> e
                           < decl > −−> < type > <decl'>
                            <type> --> int
                            <decl’> --> i;
                           < decl > −−> < type > <decl'>
                            <type> --> int
                            <decl’> --> i;
                           <set> −−> <st> { <st> }
                            <st> −−> i <st'>
                             <st'> −−> <asg_st>
                              <set> −−> <st> { <st> }
                               <var> −−> i <index>
                                <index> --> e
                               <asg_st'> --> <exp>
                                <exp> --> -<term><exp'>
                                 <term> --> <prim><term'>
                                  <prim> --> n
                                  <term'> --> e
                                 <exp'> --> e
                            <st> −−> i <st'>
                             <st'> −−> <asg_st>
                              <set> −−> <st> { <st> }
                               <var> −−> i <index>
                                <index> --> e
                               <asg_st'> --> <exp>
                                <exp> --> <term><exp'>
                                 <term> --> <prim><term'>
                                  <prim> --> n
                                  <term'> --> e
                                 <exp'> --> <add_op><term><exp'>
                                  <term> --> <prim><term'>
                                   <prim> --> n
                                   <term'> --> e
                                  <exp'> --> e
                            <st> −−> return <exp>;
                             <exp> --> <term><exp'>
                              <term> --> <prim><term'>
                               <prim> --> i <prim'>
                                <prim'> --> (<v_list>)
                                 <v_list> --> <elem><v_list'>
                                  <elem> --> i <index>
                                   <index> --> e
                                 <v_list'> --> ,<v_list'>
                                  <v_list> --> <elem><v_list'>
                                   <elem> --> i <index>
                                    <index> --> e
                                  <v_list'> --> e
                               <term'> --> e
                              <exp'> --> e
Symbol table after parsing testNegation3
{Definition = i;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = b;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

                          < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
                           <type> --> int
                           <par_list> −−> < p type > i{, < p type > i}
                            <p_type> --> <type> <p_type’>
                             <type> --> int
                             <p_type’> --> e
                            <par_list> −−> < p type > i{, < p type > i}
                             <p_type> --> <type> <p_type’>
                              <type> --> int
                              <p_type’> --> e
                             <set> −−> <st> { <st> }
                              <st> −−> if <lexp> <stmt> else <stmt>
                               <l_exp> --> <l_exp'> { || <l_exp> }
                                <l_exp’> --> <exp> { && <l_exp'> }
                                 <exp> --> <term><exp'>
                                  <term> --> <prim><term'>
                                   <prim> --> i <prim'>
                                    <prim'> --> <index>
                                     <index> --> e
                                   <term'> --> e
                                  <exp'> --> e
                                 <rel_exp> --> ( < exp >< rel op >< exp > )
                                  <exp> --> <term><exp'>
                                   <term> --> <prim><term'>
                                    <prim> --> i <prim'>
                                     <prim'> --> <index>
                                      <index> --> e
                                    <term'> --> e
                                   <exp'> --> e
                                <st> −−> <comp_st>
                                 <comp_st> −−> { <st_list> }
                                  <set> −−> <st> { <st> }
                                   <st> −−> System.out. (<v_list>);
                                    <v_list> --> <elem><v_list'>
                                     <elem> --> 'c'
                                    <v_list'> --> ,<v_list'>
                                     <v_list> --> <elem><v_list'>
                                      <elem> --> 'c'
                                     <v_list'> --> ,<v_list'>
                                      <v_list> --> <elem><v_list'>
                                       <elem> --> 'c'
                                      <v_list'> --> ,<v_list'>
                                       <v_list> --> <elem><v_list'>
                                        <elem> --> 'c'
                                       <v_list'> --> ,<v_list'>
                                        <v_list> --> <elem><v_list'>
                                         <elem> --> 'c'
                                        <v_list'> --> e
                                <st> −−> <comp_st>
                                 <comp_st> −−> { <st_list> }
                                  <set> −−> <st> { <st> }
                                   <st> −−> System.out. (<v_list>);
                                    <v_list> --> <elem><v_list'>
                                     <elem> --> 'c'
                                    <v_list'> --> ,<v_list'>
                                     <v_list> --> <elem><v_list'>
                                      <elem> --> 'c'
                                     <v_list'> --> ,<v_list'>
                                      <v_list> --> <elem><v_list'>
                                       <elem> --> 'c'
                                      <v_list'> --> ,<v_list'>
                                       <v_list> --> <elem><v_list'>
                                        <elem> --> 'c'
                                       <v_list'> --> ,<v_list'>
                                        <v_list> --> <elem><v_list'>
                                         <elem> --> 'c'
                                        <v_list'> --> ,<v_list'>
                                         <v_list> --> <elem><v_list'>
                                          <elem> --> 'c'
                                         <v_list'> --> ,<v_list'>
                                          <v_list> --> <elem><v_list'>
                                           <elem> --> 'c'
                                          <v_list'> --> e
                                   <st> −−> i <st'>
                                    <st'> −−> (v_list)
                                     <v_list> --> <elem><v_list'>
                                      <elem> --> i <index>
                                       <index> --> e
                                     <v_list'> --> e
                                   <st> −−> System.out. (<v_list>);
                                    <v_list> --> <elem><v_list'>
                                     <elem> --> 'c'
                                    <v_list'> --> ,<v_list'>
                                     <v_list> --> <elem><v_list'>
                                      <elem> --> 'c'
                                     <v_list'> --> ,<v_list'>
                                      <v_list> --> <elem><v_list'>
                                       <elem> --> 'c'
                                      <v_list'> --> e
                                   <st> −−> i <st'>
                                    <st'> −−> (v_list)
                                     <v_list> --> <elem><v_list'>
                                      <elem> --> i <index>
                                       <index> --> e
                                     <v_list'> --> e
                                   <st> −−> System.out. (<v_list>);
                                    <v_list> --> <elem><v_list'>
                                     <elem> --> 'c'
                                    <v_list'> --> e
                               <st> −−> return <exp>;
                                <exp> --> <term><exp'>
                                 <term> --> <prim><term'>
                                  <prim> --> n
                                  <term'> --> e
                                 <exp'> --> e
Symbol table after parsing equals3
{Definition = actual;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = expected;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}

                             < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
                              <type> --> int
                              <par_list> −−> < p type > i{, < p type > i}
                               <p_type> --> <type> <p_type’>
                                <type> --> int
                                <p_type’> --> e
                               <set> −−> <st> { <st> }
                                <st> −−> if <lexp> <stmt> else <stmt>
                                 <l_exp> --> <l_exp'> { || <l_exp> }
                                  <l_exp’> --> <exp> { && <l_exp'> }
                                   <exp> --> <term><exp'>
                                    <term> --> <prim><term'>
                                     <prim> --> i <prim'>
                                      <prim'> --> <index>
                                       <index> --> e
                                     <term'> --> e
                                    <exp'> --> e
                                   <rel_exp> --> ( < exp >< rel op >< exp > )
                                    <exp> --> <term><exp'>
                                     <term> --> <prim><term'>
                                      <prim> --> n
                                      <term'> --> e
                                     <exp'> --> e
                                  <st> −−> System.out. (<v_list>);
                                   <v_list> --> <elem><v_list'>
                                    <elem> --> 'c'
                                   <v_list'> --> e
                                  <st> −−> if <lexp> <stmt> else <stmt>
                                   <l_exp> --> <l_exp'> { || <l_exp> }
                                    <l_exp’> --> <exp> { && <l_exp'> }
                                     <exp> --> <term><exp'>
                                      <term> --> <prim><term'>
                                       <prim> --> i <prim'>
                                        <prim'> --> <index>
                                         <index> --> e
                                       <term'> --> e
                                      <exp'> --> e
                                     <rel_exp> --> ( < exp >< rel op >< exp > )
                                      <exp> --> <term><exp'>
                                       <term> --> <prim><term'>
                                        <prim> --> n
                                        <term'> --> e
                                       <exp'> --> e
                                    <st> −−> <comp_st>
                                     <comp_st> −−> { <st_list> }
                                      <set> −−> <st> { <st> }
                                       <st> −−> System.out. (<v_list>);
                                        <v_list> --> <elem><v_list'>
                                         <elem> --> 'c'
                                        <v_list'> --> e
                                       <st> −−> i <st'>
                                        <st'> −−> <asg_st>
                                         <set> −−> <st> { <st> }
                                          <var> −−> i <index>
                                           <index> --> e
                                          <asg_st'> --> <exp>
                                           <exp> --> -<term><exp'>
                                            <term> --> <prim><term'>
                                             <prim> --> i <prim'>
                                              <prim'> --> <index>
                                               <index> --> e
                                             <term'> --> e
                                            <exp'> --> e
                                    <st> −−> ;
                                  <st> −−> i <st'>
                                   <st'> −−> (v_list)
                                    <v_list> --> <elem><v_list'>
                                     <elem> --> i <index>
                                      <index> --> e
                                    <v_list'> --> e
                                  <st> −−> return <exp>;
                                   <exp> --> <term><exp'>
                                    <term> --> <prim><term'>
                                     <prim> --> n
                                     <term'> --> e
                                    <exp'> --> e
Symbol table after parsing printNumber3
{Definition = number;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}

                                < funct_def > −−> < type > i ( < par list > ){{< decl >} < st list > }
                                 <type> --> int
                                 <par_list> −−> < p type > i{, < p type > i}
                                  <p_type> --> <type> <p_type’>
                                   <type> --> int
                                   <p_type’> --> e
                                  < decl > −−> < type > <decl'>
                                   <type> --> int
                                   <decl’> --> i;
                                  < decl > −−> < type > <decl'>
                                   <type> --> int
                                   <decl’> --> i;
                                  <set> −−> <st> { <st> }
                                   <st> −−> if <lexp> <stmt> else <stmt>
                                    <l_exp> --> <l_exp'> { || <l_exp> }
                                     <l_exp’> --> <exp> { && <l_exp'> }
                                      <exp> --> <term><exp'>
                                       <term> --> <prim><term'>
                                        <prim> --> i <prim'>
                                         <prim'> --> <index>
                                          <index> --> e
                                        <term'> --> e
                                       <exp'> --> e
                                      <rel_exp> --> ( < exp >< rel op >< exp > )
                                       <exp> --> <term><exp'>
                                        <term> --> <prim><term'>
                                         <prim> --> n
                                         <term'> --> e
                                        <exp'> --> e
                                     <st> −−> <comp_st>
                                      <comp_st> −−> { <st_list> }
                                       <set> −−> <st> { <st> }
                                        <st> −−> i <st'>
                                         <st'> −−> <asg_st>
                                          <set> −−> <st> { <st> }
                                           <var> −−> i <index>
                                            <index> --> e
                                           <asg_st'> --> <exp>
                                            <exp> --> <term><exp'>
                                             <term> --> <prim><term'>
                                              <prim> --> i <prim'>
                                               <prim'> --> <index>
                                                <index> --> e
                                              <term'> --> <mult_op><prim><term'>
                                               <prim> --> n
                                               <term'> --> e
                                             <exp'> --> e
                                        <st> −−> i <st'>
                                         <st'> −−> <asg_st>
                                          <set> −−> <st> { <st> }
                                           <var> −−> i <index>
                                            <index> --> e
                                           <asg_st'> --> <exp>
                                            <exp> --> <term><exp'>
                                             <term> --> <prim><term'>
                                              <prim> --> i <prim'>
                                               <prim'> --> <index>
                                                <index> --> e
                                              <term'> --> <mult_op><prim><term'>
                                               <prim> --> n
                                               <term'> --> e
                                             <exp'> --> e
                                        <st> −−> i <st'>
                                         <st'> −−> (v_list)
                                          <v_list> --> <elem><v_list'>
                                           <elem> --> i <index>
                                            <index> --> e
                                          <v_list'> --> e
                                        <st> −−> i <st'>
                                         <st'> −−> <asg_st>
                                          <set> −−> <st> { <st> }
                                           <var> −−> i <index>
                                            <index> --> e
                                           <asg_st'> --> <exp>
                                            <exp> --> <term><exp'>
                                             <term> --> <prim><term'>
                                              <prim> --> i <prim'>
                                               <prim'> --> <index>
                                                <index> --> e
                                              <term'> --> e
                                             <exp'> --> <add_op><term><exp'>
                                              <term> --> <prim><term'>
                                               <prim> --> n
                                               <term'> --> e
                                              <exp'> --> e
                                        <st> −−> System.out. (<v_list>);
                                         <v_list> --> <elem><v_list'>
                                          <elem> --> i <index>
                                           <index> --> e
                                         <v_list'> --> e
                                     <st> −−> ;
                                    <st> −−> return <exp>;
                                     <exp> --> <term><exp'>
                                      <term> --> <prim><term'>
                                       <prim> --> n
                                       <term'> --> e
                                      <exp'> --> e
Symbol table after parsing rec_printNumber3
{Definition = number;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = rest;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = div;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}

