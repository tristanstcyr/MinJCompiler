< prg > −− > class i {{< decl >} < main f > {< funct_def >}}
 < decl > −−> < type > <decl'>
  <type> --> int
  <decl'> --> [] i = new <type> [ n ];
   <type> --> int
 < decl > −−> < type > <decl'>
  <type> --> int
  <decl'> --> [] i = new <type> [ n ];
   <type> --> int
 < decl > −−> < type > <decl'>
  <type> --> int
  <decl’> --> i;
 < decl > −−> < type > <decl'>
  <type> --> int
  <decl’> --> i;
 < decl > −−> < type > <decl'>
  <type> --> int
  <decl’> --> i;
 <main_f> −−> void main(){{< decl >} < st list > }
  < decl > −−> < type > <decl'>
   <type> --> char
   <decl’> --> i;
  < decl > −−> < type > <decl'>
   <type> --> int
   <decl’> --> i;
  < decl > −−> < type > <decl'>
   <type> --> int
   <decl’> --> i;
  < decl > −−> < type > <decl'>
   <type> --> int
   <decl’> --> i;
  < decl > −−> < type > <decl'>
   <type> --> int
   <decl’> --> i;
  < decl > −−> < type > <decl'>
   <type> --> int
   <decl'> --> [] i = new <type> [ n ];
    <type> --> int
  < decl > −−> < type > <decl'>
   <type> --> int
   <decl’> --> i;
  <set> −−> <st> { <st> }
   <st> −−> i <st'>
    <st'> −−> <asg_st>
     <set> −−> <st> { <st> }
      <var> −−> i <index>
       <index> --> e
      <asg_st'> --> <exp>
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> 'c'
         <term'> --> e
        <exp'> --> e
   <st> −−> while <l_exp><st>
    <l_exp> --> <l_exp'> { || <l_exp> }
     <l_exp’> --> <exp> { && <l_exp'> }
      <exp> --> <term><exp'>
       <term> --> <prim><term'>
        <prim> --> i <prim'>
         <prim'> --> <index>
          <index> --> e
        <term'> --> e
       <exp'> --> e
      <rel_exp> --> ( < exp >< rel op >< exp > )
       <exp> --> <term><exp'>
        <term> --> <prim><term'>
         <prim> --> n
         <term'> --> e
        <exp'> --> e
     <st> −−> <comp_st>
      <comp_st> −−> { <st_list> }
       <set> −−> <st> { <st> }
        <st> −−> if <lexp> <stmt> else <stmt>
         <l_exp> --> <l_exp'> { || <l_exp> }
          <l_exp’> --> <exp> { && <l_exp'> }
           <exp> --> <term><exp'>
            <term> --> <prim><term'>
             <prim> --> i <prim'>
              <prim'> --> <index>
               <index> --> e
             <term'> --> e
            <exp'> --> e
           <rel_exp> --> ( < exp >< rel op >< exp > )
            <exp> --> <term><exp'>
             <term> --> <prim><term'>
              <prim> --> n
              <term'> --> e
             <exp'> --> e
          <st> −−> <comp_st>
           <comp_st> −−> { <st_list> }
            <set> −−> <st> { <st> }
             <st> −−> i <st'>
              <st'> −−> (v_list)
               <v_list> --> <elem><v_list'>
                <elem> --> i <index>
                 <index> --> e
               <v_list'> --> e
             <st> −−> i <st'>
              <st'> −−> (v_list)
               <v_list> --> <elem><v_list'>
                <elem> --> i <index>
                 <index> --> e
               <v_list'> --> e
             <st> −−> return <exp>;
              <exp> --> <term><exp'>
               <term> --> <prim><term'>
                <prim> --> n
                <term'> --> e
               <exp'> --> e
          <st> −−> <comp_st>
           <comp_st> −−> { <st_list> }
            <set> −−> <st> { <st> }
             <st> −−> if <lexp> <stmt> else <stmt>
              <l_exp> --> <l_exp'> { || <l_exp> }
               <l_exp’> --> <exp> { && <l_exp'> }
                <exp> --> <term><exp'>
                 <term> --> <prim><term'>
                  <prim> --> i <prim'>
                   <prim'> --> <index>
                    <index> --> e
                  <term'> --> e
                 <exp'> --> e
                <rel_exp> --> ( < exp >< rel op >< exp > )
                 <exp> --> <term><exp'>
                  <term> --> <prim><term'>
                   <prim> --> 'c'
                   <term'> --> e
                  <exp'> --> e
               <st> −−> <comp_st>
                <comp_st> −−> { <st_list> }
                 <set> −−> <st> { <st> }
                  <st> −−> i <st'>
                   <st'> −−> <asg_st>
                    <set> −−> <st> { <st> }
                     <var> −−> i <index>
                      <index> --> e
                     <asg_st'> --> System.in.<type>()
                      <type> --> int
                  <st> −−> System.out. (<v_list>);
                   <v_list> --> <elem><v_list'>
                    <elem> --> i <index>
                     <index> --> e
                   <v_list'> --> e
               <st> −−> <comp_st>
                <comp_st> −−> { <st_list> }
                 <set> −−> <st> { <st> }
                  <st> −−> i <st'>
                   <st'> −−> <asg_st>
                    <set> −−> <st> { <st> }
                     <var> −−> i <index>
                      <index> --> e
                     <asg_st'> --> <exp>
                      <exp> --> <term><exp'>
                       <term> --> <prim><term'>
                        <prim> --> 'c'
                        <term'> --> e
                       <exp'> --> e
                  <st> −−> i <st'>
                   <st'> −−> <asg_st>
                    <set> −−> <st> { <st> }
                     <var> −−> i <index>
                      <index> --> e
                     <asg_st'> --> <exp>
                      <exp> --> <term><exp'>
                       <term> --> <prim><term'>
                        <prim> --> n
                        <term'> --> e
                       <exp'> --> <add_op><term><exp'>
                        <term> --> <prim><term'>
                         <prim> --> n
                         <term'> --> <mult_op><prim><term'>
                          <prim> --> n
                          <term'> --> <mult_op><prim><term'>
                           <prim> --> n
                           <term'> --> e
                        <exp'> --> <add_op><term><exp'>
                         <term> --> <prim><term'>
                          <prim> --> n
                          <term'> --> e
                         <exp'> --> <add_op><term><exp'>
                          <term> --> <prim><term'>
                           <prim> --> n
                           <term'> --> e
                          <exp'> --> e
                  <st> −−> i <st'>
                   <st'> −−> <asg_st>
                    <set> −−> <st> { <st> }
                     <var> −−> i <index>
                      <index> --> e
                     <asg_st'> --> <exp>
                      <exp> --> <term><exp'>
                       <term> --> <prim><term'>
                        <prim> --> i <prim'>
                         <prim'> --> <index>
                          <index> --> [<exp>]
                           <exp> --> <term><exp'>
                            <term> --> <prim><term'>
                             <prim> --> n
                             <term'> --> <mult_op><prim><term'>
                              <prim> --> n
                              <term'> --> e
                            <exp'> --> <add_op><term><exp'>
                             <term> --> <prim><term'>
                              <prim> --> n
                              <term'> --> e
                             <exp'> --> e
                        <term'> --> e
                       <exp'> --> e
Symbol table after parsing "main"
{Definition = fieldHasIntType;
 Type = Primitive CharType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = duplicateParam;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = i;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = z;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = a;
 Type = ArrayType IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = bor;
 Type = Primitive IntType;
 Scope = LocalVariable;
 MemoryAddress = 0u;}
{Definition = duplicateField;
 Type = ArrayType IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}
{Definition = bar;
 Type = Primitive IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}
{Definition = sameNameAsField;
 Type = Primitive IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}
{Definition = fieldHasIntType;
 Type = Primitive IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}

    <funct_def> −−> <type> i ( <par_list> ){{< decl >} <st_list> }
     <type> --> int
     <par_list> −−> <p_type> i{, <p_type> i}
      <p_type> --> <type> <p_type’>
       <type> --> int
       <p_type’> --> e
      <par_list> −−> <p_type> i{, <p_type> i}
       <p_type> --> <type> <p_type’>
        <type> --> int
        <p_type’> --> e
       <set> −−> <st> { <st> }
        <st> −−> System.out. (<v_list>);
         <v_list> --> <elem><v_list'>
          <elem> --> i <index>
           <index> --> e
         <v_list'> --> e
        <st> −−> return <exp>;
         <exp> --> <term><exp'>
          <term> --> <prim><term'>
           <prim> --> n
           <term'> --> e
          <exp'> --> e
Symbol table after parsing foo
{Definition = duplicateParam;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = duplicateField;
 Type = ArrayType IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}
{Definition = bar;
 Type = Primitive IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}
{Definition = sameNameAsField;
 Type = Primitive IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}
{Definition = fieldHasIntType;
 Type = Primitive IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}

      <funct_def> −−> <type> i ( <par_list> ){{< decl >} <st_list> }
       <type> --> int
       <par_list> −−> <p_type> i{, <p_type> i}
        <p_type> --> <type> <p_type’>
         <type> --> int
         <p_type’> --> e
        < decl > −−> < type > <decl'>
         <type> --> int
         <decl’> --> i;
        <set> −−> <st> { <st> }
         <st> −−> return <exp>;
          <exp> --> <term><exp'>
           <term> --> <prim><term'>
            <prim> --> n
            <term'> --> e
           <exp'> --> e
Symbol table after parsing foo2
{Definition = paramName;
 Type = Primitive IntType;
 Scope = ParameterVariable;
 MemoryAddress = 0u;}
{Definition = duplicateField;
 Type = ArrayType IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}
{Definition = bar;
 Type = Primitive IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}
{Definition = sameNameAsField;
 Type = Primitive IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}
{Definition = fieldHasIntType;
 Type = Primitive IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}

       <funct_def> −−> <type> i ( <par_list> ){{< decl >} <st_list> }
        <type> --> int
        < par_list > --> e
        <set> −−> <st> { <st> }
         <st> −−> return <exp>;
          <exp> --> <term><exp'>
           <term> --> <prim><term'>
            <prim> --> n
            <term'> --> e
           <exp'> --> e
Symbol table after parsing sameNameAsField
{Definition = duplicateField;
 Type = ArrayType IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}
{Definition = bar;
 Type = Primitive IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}
{Definition = sameNameAsField;
 Type = Primitive IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}
{Definition = fieldHasIntType;
 Type = Primitive IntType;
 Scope = GlobalVariable;
 MemoryAddress = 0u;}

